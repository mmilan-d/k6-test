// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";

export let options = { maxRedirects: 4 };

// Only Numeric may nt be allowed
// Assignment for you - write function to generate uniqueid with strings
function generateUUID() {
  return Math.floor(Math.random, Date.now())
}

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    courseURL: "http://127.0.0.1:83/webservice/rest/server.php",
    courseId: "15"
  }
});

// course created but not edited
// why
// one reasonc an be course creation is async and it might take lets say 2 secodns for course to get created and updated in sql DB
// so you need to wait for atleast 2 seconds before calling GET COURSE API
//but hard coded waits i.e. 2 secodsn is not good
// so you write a code, to call GET API after 1 second and if Course ID is empty then again call GET API
// Retry calling GET API after 1 second
// Do this lest say max 3 Times
// If Still course is not visilbe,i.e visible after 2 secodns, then its performance defect

// ASSIGNMENT for YOU - Write code to retry after 2 seconds, for max 3 times, retry if ID is Empty
// Apply retry mechanism on GET API Only

// But eher problem is different, lest analyse why GET API Not working

//Skill2 course is not viislbebecuase it is deleted successfully
// but we have not added logs for delete course
// so ltes change delete api call

// If developers has created proper POSMAN collection, thenw e dont need to do so much changes
// Automated K6 script will work with little modifications

// assignment - this script will not work for 2 users or more users
// becuase of hard codes short name
// so you need to remove this hard coding, execute test with more than 1 users, lest say 10 users
// 10 courses will get geenrated and deleted

// LEST DO IT !!!!!


// assignment solution - execute script for multipe users

// Press Alt Shift F to autoformat document / script
// if ther are erros , script wont be formatted

// 5 - generate 5 digit string

// letx execute for 1 user
// always execute with 1 user before mltiple users

// this is how you can fix postman scripts and execute for multipe users

// always remembeer - firxt let script work with 1 user, then got for multiple users 

// DEFETC - INFO[0005] {"exception":"dml_write_exception","errorcode":"dmlwriteexception","message":"Error writing to database"}
// we found a defect
// there is error in writing to database
// might be some cuncurrency issue
// Its defect :) yes / no

// THINK THINK THINK 

// Defect ?

/*
depends upon domain
moodle is training solution system
how many admins will be there who create course concurrently
chances might be very less

Only admin can create course
lets say admin of raining Institue or Organzaiton can create course
Normal users can not create course

So think
Chances of so many admins createing so many course in short spam of time
Chances are very less

Does it depends upon orgzanion ?
For large scla company, lets assume moodle is configured on central location
India, USA, Germany , etc etc
In Each country thre are lets say 2 admins
Alla dmins from all locations tries to crate courses at the same time

What are the chances !


So think think of all sch combinations
before logging deects

its deeftc
yes
you will log this

but severity of defect might be low
it mgiht be high if there is major design flow
even though user wont create so many courses at the same time
develope finds a design flow
so defect severioty can be very high

So my purpose is just to let you know what all things yo can think

Domain Knowledge about you product matters a lot
It matters MOST !



*/
function generateRandomString(length) {
  var chars = "asbyqwasdasdkadjqwueu17364748kadsadsjd12345678909sdiuqweyqehqwehwqehweethvnmxcpasksookl123456789lsdfokaj"
  var results;
  for (var i = length; i > 0; --i) {
    results += chars[Math.floor(Math.random() * chars.length)]
  }

  return results;

}

export default function () {

  postman[Request]({
    name: "CREATE COURSE",
    id: "3e7a68e0-9097-4083-ab7a-433f1594e120",
    method: "POST",
    address:
      // you will write fucntion to generate unique id and use instead of hard coded shortname
      "{{courseURL}}?wstoken=585a5e34abe199537fec2640b8252ef7&moodlewsrestformat=json&wsfunction=core_course_create_courses&courses[0][fullname]=Skills2&courses[0][shortname]=" + generateRandomString(15) + "&courses[0][categoryid]=1&courses[0][visible]=1&courses[0][summary]=text&courses[0][enablecompletion]=0&courses[0][summaryformat]=1&courses[0][format]=topics&courses[0][numsections]=0",
    data: {},
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    },
    post(response) {
      pm.test("Create Course Status code is 200", function () {
        pm.response.to.have.status(200);
        var response = JSON.parse(responseBody);
        console.log(JSON.stringify(response))
        console.log(response[0].id);
        postman.setEnvironmentVariable("courseId", response[0].id);
      });
    }
  });

  postman[Request]({
    name: "GET COURSE",
    id: "0fcb77db-8a8a-4857-9a28-601342f4b3af",
    method: "GET",
    address:
      // id - course id is hardcoded, so here we need to pas course id generated by Create Course API Call
      // so fetch id from Crete API call
      "http://127.0.0.1:83/webservice/rest/server.php?wstoken=585a5e34abe199537fec2640b8252ef7&wsfunction=core_course_get_courses&options[ids][0]={{courseId}}&moodlewsrestformat=json",
    post(response) {
      pm.test("Get Course Status code is 200", function () {
        pm.response.to.have.status(200);
        var res = JSON.parse(responseBody);
        console.log(res[0].id);
      });
    }
  });

  postman[Request]({
    name: "DELETE COURSE",
    id: "b56567c9-b2fd-4dae-a33b-fad006f28732",
    method: "DELETE",
    address:
      "{{courseURL}}?wstoken=585a5e34abe199537fec2640b8252ef7&moodlewsrestformat=json&wsfunction=core_course_delete_courses&courseids[0]={{courseId}}",
    post(response) {
      pm.test("Delete Course Status code is 200", function () {
        pm.response.to.have.status(200);
      });
    }
  });
}
